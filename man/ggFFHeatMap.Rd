% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ggFFHeatMap.R
\name{ggFFHeatMap}
\alias{ggFFHeatMap}
\title{Heatmap using GGPlot2 and FatFonts}
\usage{
ggFFConfMatr(x, y, z, xAxisTitle = 'x', yAxisTitle = 'y', zAxisTitle = 'z',
tileBorderColor = '#C2C2C2', tileBorderSize = 0.1, tileFill = '#FFFFFF',
shrink = -1, font = 'Cubica', fontSize = -1, fontColor = '#000000',
isSquare = TRUE, adjustPos = 2, changeFontColValue = NULL,
changeFontColDigit = NULL, changeBackCol = NULL, ...)
}
\arguments{
\item{x}{A vector containing the x values of each data point. x, y and z should be of the same length.}

\item{y}{A vector containing the y values of each data point. x, y and z should be of the same length.}

\item{z}{A numeric vector containing the values to be displayed in FatFonts. x, y and z should be of the same length.}

\item{xAxisTitle}{The title of x axis. (default:'x')}

\item{yAxisTitle}{The title of y axis. (default: 'y')}

\item{zAxisTitle}{The title of the data to be displayed in FatFonts. (default: 'z')}

\item{tileBorderColor}{The color of the border of the tiles. (default: '#C2C2C2')}

\item{tileFill}{The fill color of the tiles. (default: '#FFFFFF')}

\item{shrink}{To what extent are the raw values reduced. For instance, if shrink = 1000 and the original data is D, then the values displayed by FatFonts will be 1000D. If shrink = -1, then shrink will be chosen automatically. (default: -1)}

\item{font}{The FatFonts family used in the plot. There are currently three FatFonts types available: "Cubica", "Miguta" and "Rotunda". (default: 'Cubica')}

\item{fontSize}{The font size of the smallest FatFonts digit. If fontSize = -1, then font size will be chosen automatically. (default: -1)}

\item{fontColor}{The color of FatFonts digit. (default:'#000000')}

\item{isSquare}{If each grid is square. It is better to display FatFonts numbers in square rather than rectangle grids. (default: TRUE)}

\item{adjustPos}{Parameter used to slightly adjust the location of FatFonts digits. (default: 2)}

\item{changeFontColValue}{A function used to change font color based on value. An example function can be defined as follow: changeFontColValueFunc <- function(oldPlot){newPlot <- oldPlot + scale_color_gradient2(); return(newPlot)}. (default: NULL)}

\item{changeFontColDigit}{A vector containing the 9 colors used to represent each digit respectively (in the order of 1 to 9). You can also use color combinations provided by the system (e.g. topo.colors(9)). (default: NULL)}

\item{changeBackCol}{A function used to change tile fill color based on value. An example function can be defined as follow: changeBackColFunc <- function(oldPlot){newPlot <- oldPlot + scale_fill_gradient(low = 'white', high = 'purple'); return(newPlot)}. (default: NULL)}

\item{...}{Other arguments passed on to methods. Not currently used.}

\item{tileVorderSize}{The size of the border of the tiles. (default: 0.1)}
}
\description{
ggFFConfMatr() produces Heatmap using GGPlot2 and FatFonts.
}
\examples{
ggFFHeatMap(x = txhousing$year[1:3000], y = txhousing$city[1:3000],
 z = txhousing$sales[1:3000], xAxisTitle = 'year', yAxisTitle = 'city',
 zAxisTitle = 'sales')

ggFFHeatMap(x = txhousing$year[1:2000], y = txhousing$city[1:2000],
 z = txhousing$sales[1:2000], xAxisTitle = 'year',
  yAxisTitle = 'city', zAxisTitle = 'sales', fontSize = 2)

ggFFHeatMap(x = txhousing$year[1:2000], y = txhousing$city[1:2000],
 z = txhousing$sales[1:2000], xAxisTitle = 'year',
 yAxisTitle = 'city', zAxisTitle = 'sales', fontSize = 2,
 font = 'Miguta')

ggFFHeatMap(x = txhousing$year[1:2000], y = txhousing$city[1:2000],
 z = txhousing$sales[1:2000], xAxisTitle = 'year',
 yAxisTitle = 'city', zAxisTitle = 'sales', shrink = 0.01,
 adjustPos = 1)

ggFFHeatMap(x = txhousing$year[1:2000], y = txhousing$city[1:2000],
 z = txhousing$sales[1:2000], xAxisTitle = 'year',
 yAxisTitle = 'city', zAxisTitle = 'sales', fontSize = 2,
 tileFill = 'black', fontColor = 'white')

ggFFHeatMap(x = txhousing$year[1:2000], y = txhousing$city[1:2000],
 z = txhousing$sales[1:2000], xAxisTitle = 'year',
 yAxisTitle = 'city', zAxisTitle = 'sales', fontSize = 2,
 isSquare = FALSE)

changeBackColFunc <- function(oldPlot){
  newPlot <- oldPlot + scale_fill_gradient(low = 'white', high = 'purple')
  return(newPlot)
}
ggFFHeatMap(x = txhousing$year[1:2000], y = txhousing$city[1:2000],
 z = txhousing$sales[1:2000], xAxisTitle = 'year',
 yAxisTitle = 'city', zAxisTitle = 'sales', fontSize = 2,
 changeBackCol = changeBackColFunc)

changeFontColValueFunc <- function(oldPlot){
  newPlot <- oldPlot + scale_color_continuous(low = 'dark grey', high = 'purple')
 return(newPlot)
}
ggFFHeatMap(x = txhousing$year[1:2000], y = txhousing$city[1:2000],
 z = txhousing$sales[1:2000], xAxisTitle = 'year',
 yAxisTitle = 'city', zAxisTitle = 'sales', fontSize = 2,
 changeFontColValue = changeFontColValueFunc)

cols <- topo.colors(9)
ggFFHeatMap(x = txhousing$year[1:2000], y = txhousing$city[1:2000],
 z = txhousing$sales[1:2000], xAxisTitle = 'year',
 yAxisTitle = 'city', zAxisTitle = 'sales', fontSize = 2,
 changeFontColDigit = cols)

}
